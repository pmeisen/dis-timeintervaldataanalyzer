<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<model xmlns="http://dev.meisen.net/xsd/dissertation/model"
       xmlns:db="http://dev.meisen.net/xsd/dissertation/model/db"
       xmlns:fxd="http://dev.meisen.net/xsd/dissertation/model/fxd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       
       xsi:schemaLocation="http://dev.meisen.net/xsd/dissertation/model     http://dev.meisen.net/xsd/dissertation/tidaModel.xsd
                           http://dev.meisen.net/xsd/dissertation/model/db  http://dev.meisen.net/xsd/dissertation/tidaDatabaseExtension.xsd
                           http://dev.meisen.net/xsd/dissertation/model/fxd http://dev.meisen.net/xsd/dissertation/tidaFixedStructureExtension.xsd"

       id="modelWithExternalSources">

  <config>
    <factories>
      <!-- Define the factory to be used to determine which IndexedCollectionFactory
           to be used.
           
           The following factories are available by default:
            + net.meisen.dissertation.impl.indexes.IndexedCollectionFactory
        -->
      <indexes implementation="net.meisen.dissertation.impl.indexes.IndexedCollectionFactory" />
    </factories>
    
    <!-- Define additional data retriever, i.e. possibilities to load data from external sources, 
         by default the following id-prefixes are mapped to the specified implementation:
          + db_       is mapped to     net.meisen.dissertation.impl.dataretriever.DbDataRetriever
          + fxd_      is mapped to     net.meisen.dissertation.impl.dataretriever.FixedStructureDataRetriever
      -->
    <dataretrievers>
      <dataretriever id="db_butFixed" implementation="net.meisen.dissertation.impl.dataretriever.FixedStructureDataRetriever" />
      <dataretriever id="myOwnId" implementation="net.meisen.dissertation.impl.dataretriever.FixedStructureDataRetriever">
        <fxd:record>
          <fxd:field name="DOUBLE" type="java.lang.Double" />
        </fxd:record>
      </dataretriever>
      <dataretriever id="fxd_test">
        <fxd:record>
          <fxd:field name="FIX_DOUBLE" value="1.00" type="java.lang.Double" />
          <fxd:field name="FIX_STRING" value="Hello World" type="java.lang.String" />
          <fxd:field name="FIX_INTEGER" value="1" type="java.lang.Integer" />
          <fxd:field name="FIX_LONG" value="10000" type="java.lang.Long" />
          
          <fxd:field name="RND_DOUBLE" type="java.lang.Double" />
          <fxd:field name="RND_STRING" type="java.lang.String" />
          <fxd:field name="RND_INTEGER" type="java.lang.Integer" />
          <fxd:field name="RND_LONG" type="java.lang.Long" />
          
          <fxd:field name="NULL_INTEGER" type="java.lang.Integer" random="false" />
        </fxd:record>
      </dataretriever>
      <dataretriever id="db_test">
        <db:connection type="jdbc" url="jdbc:hsqldb:hsql://localhost:6666/tidaTestData" driver="org.hsqldb.jdbcDriver" username="SA" password="" />
      </dataretriever>
    </dataretrievers>
  </config>

  <meta>
    <descriptors>
      <resource id="R1" name="person" />
      <resource id="R2" name="toy" />
      <resource id="R3" />
    
      <string id="D1" name="funFactor" />
      <integer id="D2" name="smiles" />
      <string id="D3" />
      <string id="D4" />
    </descriptors>

    <entries>
      <entry descriptor="R1" value="Edison" />
      <entry descriptor="R2" dataretriever="db_test">
        <db:query>SELECT DISTINCT CONVERT(COUNTER, SQL_VARCHAR) FROM TB_TESTDATA</db:query>
      </entry>
      <entry descriptor="R3" value="NoValue" />

      <entry descriptor="D1" dataretriever="db_test">
        <db:query language="sql">SELECT DISTINCT FIXED FROM TB_TESTDATA</db:query>
      </entry>
      <entry descriptor="D2" value="2" />
      <entry descriptor="D3" value="Some Value" />     
      <entry descriptor="D4" dataretriever="fxd_test">
        <fxd:query amount="1" />
      </entry>
    </entries>
  </meta>

  <interval granularity="net.meisen.dissertation.model.granularity.rawtime.Minute" 
            naturals="net.meisen.dissertation.impl.naturals.IntegerNaturalsFactory"
            mapper="not.defined.Yet" />
</model>