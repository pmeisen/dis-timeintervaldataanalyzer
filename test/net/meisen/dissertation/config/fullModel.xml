<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<!-- OfflineMode (i.e. what should happen if a dataretriever is not available)
     is optional and can be one of the following values (case-insensitive):
      + true, y, yes
      + false, n, no
      + auto
  -->
<model xmlns="http://dev.meisen.net/xsd/dissertation/model"
       xmlns:advDes="http://dev.meisen.net/xsd/dissertation/model/advancedDescriptors"
       xmlns:idx="http://dev.meisen.net/xsd/dissertation/model/indexes"
       xmlns:map="http://dev.meisen.net/xsd/dissertation/model/mapper" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       
       xsi:schemaLocation="http://dev.meisen.net/xsd/dissertation/model                     http://dev.meisen.net/xsd/dissertation/tidaModel.xsd
                           http://dev.meisen.net/xsd/dissertation/model/indexes             http://dev.meisen.net/xsd/dissertation/tidaIndexFactory.xsd
                           http://dev.meisen.net/xsd/dissertation/model/advancedDescriptors http://dev.meisen.net/xsd/dissertation/tidaAdvancedDescriptors.xsd
                           http://dev.meisen.net/xsd/dissertation/model/mapper              http://dev.meisen.net/xsd/dissertation/tidaMapperFactory.xsd"
       
       offlinemode="false" folder="_data/fullModel" id="fullModel" name="My wonderful Model">

  <config>
    <caches>
      <!-- Define the cache to be used for metadata.
  
           The following cache implementations are available:
            + net.meisen.dissertation.impl.cache.MemoryIdentifierCache
            + net.meisen.dissertation.impl.cache.FileIdentifierCache
        -->
      <identifier implementation="net.meisen.dissertation.impl.cache.MemoryIdentifierCache" />
    
      <!-- Define the cache to be used for metadata.

           The following cache implementations are available:
            + net.meisen.dissertation.impl.cache.MemoryMetaDataCache
            + net.meisen.dissertation.impl.cache.FileMetaDataCache
        -->
      <metadata implementation="net.meisen.dissertation.impl.cache.MemoryMetaDataCache" />
      
      <!-- Define the cache to be used for bitmaps.

           The following cache implementations are available:
            + net.meisen.dissertation.impl.cache.MemoryBitmapCache
            + net.meisen.dissertation.impl.cache.MapDbBitmapCache
            + net.meisen.dissertation.impl.cache.FileBitmapCache
        -->
      <bitmap implementation="net.meisen.dissertation.impl.cache.MemoryBitmapCache" />
      
      <!-- Define the cache to be used for fact-sets.

           The following cache implementations are available:
            + net.meisen.dissertation.impl.cache.MemoryFactDescriptorModelSetCache
            + net.meisen.dissertation.impl.cache.FileFactDescriptorModelSetCache
        -->
      <factsets implementation="net.meisen.dissertation.impl.cache.MemoryFactDescriptorModelSetCache" />
      
      <!-- Define the cache to be used for records.

           The following cache implementations are available:
            + net.meisen.dissertation.impl.cache.IdsOnlyDataRecordCache
            + net.meisen.dissertation.impl.cache.MemoryDataRecordCache
            + net.meisen.dissertation.impl.cache.MapDbDataRecordCache
        -->
      <records implementation="net.meisen.dissertation.impl.cache.IdsOnlyDataRecordCache" />
    </caches>

    <factories>
      <!-- Define the factory to be used to determine which IndexFactory
           to be used.
           
           The following factories are available by default:
            + net.meisen.dissertation.impl.indexes.IndexFactory
        -->
      <indexes implementation="net.meisen.dissertation.impl.indexes.IndexFactory">
        <!-- Define the different indexes to be used.
      
             The following bitmap-indexes are available by default:
              + net.meisen.dissertation.impl.indexes.datarecord.slices.EWAHBitmap
              + net.meisen.dissertation.impl.indexes.datarecord.slices.RoaringBitmap
           
             The following implementations are by default available for specific 
             primitive data types:
              + net.meisen.dissertation.impl.indexes.FastUtilIntIndexedCollection
              + net.meisen.dissertation.impl.indexes.FastUtilLongIndexedCollection
              + net.meisen.dissertation.impl.indexes.HppcIntIndexedCollection
              + net.meisen.dissertation.impl.indexes.HppcLongIndexedCollection
              + net.meisen.dissertation.impl.indexes.TroveByteIndexedCollection
              + net.meisen.dissertation.impl.indexes.TroveShortIndexedCollection
              + net.meisen.dissertation.impl.indexes.TroveIntIndexedCollection
              + net.meisen.dissertation.impl.indexes.TroveLongIndexedCollection 
          -->
        <idx:config bitmap="net.meisen.dissertation.impl.indexes.datarecord.slices.EWAHBitmap"
        			byte="net.meisen.dissertation.impl.indexes.TroveByteIndexedCollection"
        			short="net.meisen.dissertation.impl.indexes.TroveShortIndexedCollection"
                    int="net.meisen.dissertation.impl.indexes.TroveIntIndexedCollection"
                    long="net.meisen.dissertation.impl.indexes.TroveLongIndexedCollection" />
    </indexes>
      
      <!-- Define the factory to be used to determine which MapperFactory
           to be used.
           
           The following factories are available by default:
            + net.meisen.dissertation.impl.time.mapper.MapperFactory
        -->
      <mappers implementation="net.meisen.dissertation.impl.time.mapper.MapperFactory">
      
        <!-- The inheritance of the default mappers (default means in that case the once
             defined in the global configuration) can be true or false.
          -->
        <map:config inheritDefault="true">
      
          <!--
            Adds mappers to the default once. The default once cannot be removed and are:
             + net.meisen.dissertation.impl.time.mapper.DateMapper
             + net.meisen.dissertation.impl.time.mapper.LongMapper
            -->
          <map:mapper implementation="net.meisen.dissertation.impl.time.mapper.DateMapper" />
          <map:mapper implementation="net.meisen.dissertation.impl.time.mapper.LongMapper" />
        </map:config>
      </mappers>
      
      <!-- Define the factory to be used to determine the granularity-factory.
         
           The following factories are available by default:
            + net.meisen.dissertation.impl.time.granularity.TimeGranularityFactory
        -->
      <granularities implementation="net.meisen.dissertation.impl.time.granularity.TimeGranularityFactory" />
    </factories>
  </config>
  
  <time>
    <timeline start="20.01.1981" duration="100" granularity="YEAR" />
  </time>

  <meta>
    <!-- As identifier-factory the following implementations are available:
          + net.meisen.dissertation.impl.idfactories.IntegerIdsFactory
          + net.meisen.dissertation.impl.idfactories.LongIdsFactory
          + net.meisen.dissertation.impl.idfactories.UuIdsFactory
          
         The null-attribute (true or false) defines if null values are allowed within 
         the model.
         The failonduplicates-attributes (true or false) specifies if duplicates are 
         just ignored or if an exception is thrown.
      -->
    <descriptors>
      <resource id="R1" failonduplicates="true" null="false" name="person" idfactory="net.meisen.dissertation.impl.idfactories.UuIdsFactory" />
      <resource id="R2" null="false" name="toy" idfactory="net.meisen.dissertation.impl.idfactories.UuIdsFactory" />
      <resource id="R3" null="true" />
    
      <string id="D1" name="funFactor" />
      <integer id="D2" name="smiles" />
      <string id="D3" />
      <advDes:list id="D4" idfactory="net.meisen.dissertation.impl.idfactories.LongIdsFactory" />
    </descriptors>
    
    <entries>
      <entry descriptor="R1" value="Philipp" />
      <entry descriptor="R1" value="Debbie" />
      <entry descriptor="R1" value="Edison" />
      
      <entry descriptor="R2" value="rattle" />
      <entry descriptor="R2" value="teddy" />
      <entry descriptor="R2" value="cup" />
      <entry descriptor="R2" value="doll" />

      <entry descriptor="D1" value="no" />
      <entry descriptor="D1" value="low" />
      <entry descriptor="D1" value="average" />
      <entry descriptor="D1" value="high" />
      <entry descriptor="D1" value="very high" />

      <entry descriptor="D2" value="1" />
      <entry descriptor="D2" value="2" />
      <entry descriptor="D2" value="3" />
      <entry descriptor="D2" value="4" />
      <entry descriptor="D2" value="5" />

      <entry descriptor="D3" value="Some Value" />

      <entry descriptor="D4" value="A,B,C" />
      <entry descriptor="D4" value="D,E,F,G,H" />
      <entry descriptor="D4" value="I" />
    </entries>
  </meta>
    
  <structure />
  
  <!-- MetaDataHandling (i.e. what has to be done if no Descriptor is available so far)
       is optional and can be one of the following values (case-insensitive):
        + handleAsNull, null
        + createDescriptor, create, add
        + failOnError, fail
        
       IntervalDataHandling (i.e. what has to be done if an interval-value is null)
        + boundariesWhenNull, boundaries
        + useOther, other, others
        + failOnNull, fail
    -->
  <data metahandling="create" intervalhandling="boundariesWhenNull" />
</model>