<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<model xmlns="http://dev.meisen.net/xsd/dissertation/model"
       xmlns:advDes="http://dev.meisen.net/xsd/dissertation/model/advancedDescriptors"
       xmlns:db="http://dev.meisen.net/xsd/dissertation/model/db"
       xmlns:fxd="http://dev.meisen.net/xsd/dissertation/model/fxd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       
       xsi:schemaLocation="http://dev.meisen.net/xsd/dissertation/model                     http://dev.meisen.net/xsd/dissertation/tidaModel.xsd
                           http://dev.meisen.net/xsd/dissertation/model/db                  http://dev.meisen.net/xsd/dissertation/tidaDatabaseExtension.xsd
                           http://dev.meisen.net/xsd/dissertation/model/fxd                 http://dev.meisen.net/xsd/dissertation/tidaFixedStructureExtension.xsd
                           http://dev.meisen.net/xsd/dissertation/model/advancedDescriptors http://dev.meisen.net/xsd/dissertation/tidaAdvancedDescriptors.xsd"
       
       id="myModel" name="My wonderful Model">

  <config>
    <factories>
      <!-- Define the factory to be used to determine which IndexedCollectionFactory
           to be used.
           
           The following factories are available by default:
            + net.meisen.dissertation.impl.indexes.IndexedCollectionFactory
        -->
      <indexes implementation="net.meisen.dissertation.impl.indexes.IndexedCollectionFactory" />
      
      <!-- Define the factory to be used to determine which MapperFactory
           to be used.
           
           The following factories are available by default:
            + net.meisen.dissertation.impl.time.mapper.MapperFactory
        -->
      <mappers implementation="net.meisen.dissertation.impl.time.mapper.MapperFactory" />
    </factories>
  </config>
  
  <time>
    <timeline start="20.01.1981" duration="100" granularity="YEAR" />
  </time>

  <meta>
    <!-- As identifier-factory the following implementations are available:
          + net.meisen.dissertation.impl.idfactories.IntegerIdsFactory
          + net.meisen.dissertation.impl.idfactories.LongIdsFactory
          + net.meisen.dissertation.impl.idfactories.UuIdsFactory
          
         The null-attribute (true or false) defines if null values are allowed within 
         the model. 
      -->
    <descriptors>
      <resource id="R1" null="false" name="person" idfactory="net.meisen.dissertation.impl.idfactories.UuIdsFactory" />
      <resource id="R2" null="false" name="toy" idfactory="net.meisen.dissertation.impl.idfactories.UuIdsFactory" />
      <resource id="R3" null="true" />
    
      <string id="D1" name="funFactor" />
      <integer id="D2" name="smiles" />
      <string id="D3" />
      <advDes:list id="D4" idfactory="net.meisen.dissertation.impl.idfactories.LongIdsFactory" />
    </descriptors>
    
    <entries>
      <entry descriptor="R1" value="Philipp" />
      <entry descriptor="R1" value="Debbie" />
      <entry descriptor="R1" value="Edison" />
      
      <entry descriptor="R2" value="rattle" />
      <entry descriptor="R2" value="teddy" />
      <entry descriptor="R2" value="cup" />
      <entry descriptor="R2" value="doll" />

      <entry descriptor="D1" value="no" />
      <entry descriptor="D1" value="low" />
      <entry descriptor="D1" value="average" />
      <entry descriptor="D1" value="high" />
      <entry descriptor="D1" value="very high" />

      <entry descriptor="D2" value="1" />
      <entry descriptor="D2" value="2" />
      <entry descriptor="D2" value="3" />
      <entry descriptor="D2" value="4" />
      <entry descriptor="D2" value="5" />

      <entry descriptor="D3" value="Some Value" />

      <entry descriptor="D4" value="A,B,C" />
      <entry descriptor="D4" value="D,E,F,G,H" />
      <entry descriptor="D4" value="I" />
    </entries>
  </meta>
    
  <structure />
  
  <!-- MetaDataHandling (i.e. what has to be done if no Descriptor is available so far)
       is optional and can be one of the following values (case-insensitive):
        + handleAsNull, null
        + createDescriptor, create, add
        + failOnError, fail
        
       IntervalDataHandling (i.e. what has to be done if an interval-value is null)
        + boundariesWhenNull, boundaries
        + failOnNull, fail
    -->
  <data metahandling="create" intervalhandling="boundariesWhenNull" />
</model>