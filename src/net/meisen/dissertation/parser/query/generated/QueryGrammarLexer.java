// Generated from Y:\dis-timeintervaldataanalyzer\src\net\meisen\dissertation\parser\query\generated\QueryGrammar.g4 by ANTLR 4.1

package net.meisen.dissertation.parser.query.generated;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class QueryGrammarLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		STMT_SELECT=1, TYPE_TIMESERIES=2, TYPE_RECORDS=3, OP_IN=4, OP_GROUPBY=5, 
		OP_FILTERBY=6, LOGICAL_OR=7, LOGICAL_AND=8, LOGICAL_NOT=9, CMP_EQUAL=10, 
		BRACKET_ROUND_OPENED=11, BRACKET_ROUND_CLOSED=12, BRACKET_SQUARE_OPENED=13, 
		BRACKET_SQUARE_CLOSED=14, SEPARATOR=15, IDENTIFIER=16, DATE=17, INT=18, 
		DESC_VALUE=19, WHITESPACE=20;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"STMT_SELECT", "TYPE_TIMESERIES", "TYPE_RECORDS", "OP_IN", "OP_GROUPBY", 
		"OP_FILTERBY", "LOGICAL_OR", "LOGICAL_AND", "LOGICAL_NOT", "'='", "'('", 
		"')'", "'['", "']'", "','", "IDENTIFIER", "DATE", "INT", "DESC_VALUE", 
		"WHITESPACE"
	};
	public static final String[] ruleNames = {
		"STMT_SELECT", "TYPE_TIMESERIES", "TYPE_RECORDS", "OP_IN", "OP_GROUPBY", 
		"OP_FILTERBY", "LOGICAL_OR", "LOGICAL_AND", "LOGICAL_NOT", "CMP_EQUAL", 
		"BRACKET_ROUND_OPENED", "BRACKET_ROUND_CLOSED", "BRACKET_SQUARE_OPENED", 
		"BRACKET_SQUARE_CLOSED", "SEPARATOR", "IDENTIFIER", "DATE", "INT", "DESC_VALUE", 
		"WHITESPACE", "SYM_DESC_VALUE", "SYM_QUOTE", "A", "B", "C", "D", "E", 
		"F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", 
		"T", "U", "V", "W", "X", "Y", "Z"
	};


	public QueryGrammarLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "QueryGrammar.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 19: WHITESPACE_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void WHITESPACE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: skip();  break;
		}
	}

	public static final String _serializedATN =
		"\3\uacf5\uee8c\u4f5d\u8b0d\u4a45\u78bd\u1b2f\u3378\2\26\u0180\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\3\2\3\2\3\2\3\2\3\2\3\2"+
		"\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\5\b\u0099\n\b\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\5\t\u00a1\n\t\3\n\3\n\3\n\3\n\3\n\5\n\u00a8\n\n\3\13"+
		"\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\7\21\u00b8"+
		"\n\21\f\21\16\21\u00bb\13\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3"+
		"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3"+
		"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3"+
		"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3"+
		"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3"+
		"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3"+
		"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3"+
		"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3"+
		"\22\3\22\3\22\3\22\3\22\3\22\5\22\u012d\n\22\3\23\6\23\u0130\n\23\r\23"+
		"\16\23\u0131\3\24\3\24\3\24\3\24\5\24\u0138\n\24\3\24\7\24\u013b\n\24"+
		"\f\24\16\24\u013e\13\24\3\24\3\24\3\25\6\25\u0143\n\25\r\25\16\25\u0144"+
		"\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33"+
		"\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$"+
		"\3$\3%\3%\3&\3&\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3"+
		"/\3\60\3\60\3\61\3\61\3\u013c\62\3\3\1\5\4\1\7\5\1\t\6\1\13\7\1\r\b\1"+
		"\17\t\1\21\n\1\23\13\1\25\f\1\27\r\1\31\16\1\33\17\1\35\20\1\37\21\1!"+
		"\22\1#\23\1%\24\1\'\25\1)\26\2+\2\1-\2\1/\2\1\61\2\1\63\2\1\65\2\1\67"+
		"\2\19\2\1;\2\1=\2\1?\2\1A\2\1C\2\1E\2\1G\2\1I\2\1K\2\1M\2\1O\2\1Q\2\1"+
		"S\2\1U\2\1W\2\1Y\2\1[\2\1]\2\1_\2\1a\2\1\3\2 \4\2C\\c|\7\2//\62;C\\aa"+
		"c|\3\2\62;\5\2\13\f\17\17\"\"\4\2CCcc\4\2DDdd\4\2EEee\4\2FFff\4\2GGgg"+
		"\4\2HHhh\4\2IIii\4\2JJjj\4\2KKkk\4\2LLll\4\2MMmm\4\2NNnn\4\2OOoo\4\2P"+
		"Ppp\4\2QQqq\4\2RRrr\4\2SSss\4\2TTtt\4\2UUuu\4\2VVvv\4\2WWww\4\2XXxx\4"+
		"\2YYyy\4\2ZZzz\4\2[[{{\4\2\\\\||\u0173\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2"+
		"\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2"+
		"\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3"+
		"\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3"+
		"\2\2\2\3c\3\2\2\2\5j\3\2\2\2\7u\3\2\2\2\t}\3\2\2\2\13\u0080\3\2\2\2\r"+
		"\u0089\3\2\2\2\17\u0098\3\2\2\2\21\u00a0\3\2\2\2\23\u00a7\3\2\2\2\25\u00a9"+
		"\3\2\2\2\27\u00ab\3\2\2\2\31\u00ad\3\2\2\2\33\u00af\3\2\2\2\35\u00b1\3"+
		"\2\2\2\37\u00b3\3\2\2\2!\u00b5\3\2\2\2#\u012c\3\2\2\2%\u012f\3\2\2\2\'"+
		"\u0133\3\2\2\2)\u0142\3\2\2\2+\u0148\3\2\2\2-\u014a\3\2\2\2/\u014c\3\2"+
		"\2\2\61\u014e\3\2\2\2\63\u0150\3\2\2\2\65\u0152\3\2\2\2\67\u0154\3\2\2"+
		"\29\u0156\3\2\2\2;\u0158\3\2\2\2=\u015a\3\2\2\2?\u015c\3\2\2\2A\u015e"+
		"\3\2\2\2C\u0160\3\2\2\2E\u0162\3\2\2\2G\u0164\3\2\2\2I\u0166\3\2\2\2K"+
		"\u0168\3\2\2\2M\u016a\3\2\2\2O\u016c\3\2\2\2Q\u016e\3\2\2\2S\u0170\3\2"+
		"\2\2U\u0172\3\2\2\2W\u0174\3\2\2\2Y\u0176\3\2\2\2[\u0178\3\2\2\2]\u017a"+
		"\3\2\2\2_\u017c\3\2\2\2a\u017e\3\2\2\2cd\5S*\2de\5\67\34\2ef\5E#\2fg\5"+
		"\67\34\2gh\5\63\32\2hi\5U+\2i\4\3\2\2\2jk\5U+\2kl\5? \2lm\5G$\2mn\5\67"+
		"\34\2no\5S*\2op\5\67\34\2pq\5Q)\2qr\5? \2rs\5\67\34\2st\5S*\2t\6\3\2\2"+
		"\2uv\5Q)\2vw\5\67\34\2wx\5\63\32\2xy\5K&\2yz\5Q)\2z{\5\65\33\2{|\5S*\2"+
		"|\b\3\2\2\2}~\5? \2~\177\5I%\2\177\n\3\2\2\2\u0080\u0081\5;\36\2\u0081"+
		"\u0082\5Q)\2\u0082\u0083\5K&\2\u0083\u0084\5W,\2\u0084\u0085\5M\'\2\u0085"+
		"\u0086\7\"\2\2\u0086\u0087\5\61\31\2\u0087\u0088\5_\60\2\u0088\f\3\2\2"+
		"\2\u0089\u008a\59\35\2\u008a\u008b\5? \2\u008b\u008c\5E#\2\u008c\u008d"+
		"\5U+\2\u008d\u008e\5\67\34\2\u008e\u008f\5Q)\2\u008f\u0090\7\"\2\2\u0090"+
		"\u0091\5\61\31\2\u0091\u0092\5_\60\2\u0092\16\3\2\2\2\u0093\u0094\5K&"+
		"\2\u0094\u0095\5Q)\2\u0095\u0099\3\2\2\2\u0096\u0097\7~\2\2\u0097\u0099"+
		"\7~\2\2\u0098\u0093\3\2\2\2\u0098\u0096\3\2\2\2\u0099\20\3\2\2\2\u009a"+
		"\u009b\5/\30\2\u009b\u009c\5I%\2\u009c\u009d\5\65\33\2\u009d\u00a1\3\2"+
		"\2\2\u009e\u009f\7(\2\2\u009f\u00a1\7(\2\2\u00a0\u009a\3\2\2\2\u00a0\u009e"+
		"\3\2\2\2\u00a1\22\3\2\2\2\u00a2\u00a3\5I%\2\u00a3\u00a4\5K&\2\u00a4\u00a5"+
		"\5U+\2\u00a5\u00a8\3\2\2\2\u00a6\u00a8\7#\2\2\u00a7\u00a2\3\2\2\2\u00a7"+
		"\u00a6\3\2\2\2\u00a8\24\3\2\2\2\u00a9\u00aa\7?\2\2\u00aa\26\3\2\2\2\u00ab"+
		"\u00ac\7*\2\2\u00ac\30\3\2\2\2\u00ad\u00ae\7+\2\2\u00ae\32\3\2\2\2\u00af"+
		"\u00b0\7]\2\2\u00b0\34\3\2\2\2\u00b1\u00b2\7_\2\2\u00b2\36\3\2\2\2\u00b3"+
		"\u00b4\7.\2\2\u00b4 \3\2\2\2\u00b5\u00b9\t\2\2\2\u00b6\u00b8\t\3\2\2\u00b7"+
		"\u00b6\3\2\2\2\u00b8\u00bb\3\2\2\2\u00b9\u00b7\3\2\2\2\u00b9\u00ba\3\2"+
		"\2\2\u00ba\"\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bc\u00bd\t\4\2\2\u00bd\u00be"+
		"\t\4\2\2\u00be\u00bf\7\60\2\2\u00bf\u00c0\t\4\2\2\u00c0\u00c1\t\4\2\2"+
		"\u00c1\u00c2\7\60\2\2\u00c2\u00c3\t\4\2\2\u00c3\u00c4\t\4\2\2\u00c4\u00c5"+
		"\t\4\2\2\u00c5\u00c6\t\4\2\2\u00c6\u00c7\7\"\2\2\u00c7\u00c8\t\4\2\2\u00c8"+
		"\u00c9\t\4\2\2\u00c9\u00ca\7<\2\2\u00ca\u00cb\t\4\2\2\u00cb\u00cc\t\4"+
		"\2\2\u00cc\u00cd\7<\2\2\u00cd\u00ce\t\4\2\2\u00ce\u012d\t\4\2\2\u00cf"+
		"\u00d0\t\4\2\2\u00d0\u00d1\t\4\2\2\u00d1\u00d2\7\60\2\2\u00d2\u00d3\t"+
		"\4\2\2\u00d3\u00d4\t\4\2\2\u00d4\u00d5\7\60\2\2\u00d5\u00d6\t\4\2\2\u00d6"+
		"\u00d7\t\4\2\2\u00d7\u00d8\t\4\2\2\u00d8\u012d\t\4\2\2\u00d9\u00da\t\4"+
		"\2\2\u00da\u00db\t\4\2\2\u00db\u00dc\t\4\2\2\u00dc\u00dd\t\4\2\2\u00dd"+
		"\u00de\7/\2\2\u00de\u00df\t\4\2\2\u00df\u00e0\t\4\2\2\u00e0\u00e1\7/\2"+
		"\2\u00e1\u00e2\t\4\2\2\u00e2\u00e3\t\4\2\2\u00e3\u00e4\7\"\2\2\u00e4\u00e5"+
		"\t\4\2\2\u00e5\u00e6\t\4\2\2\u00e6\u00e7\7<\2\2\u00e7\u00e8\t\4\2\2\u00e8"+
		"\u00e9\t\4\2\2\u00e9\u00ea\7<\2\2\u00ea\u00eb\t\4\2\2\u00eb\u012d\t\4"+
		"\2\2\u00ec\u00ed\t\4\2\2\u00ed\u00ee\t\4\2\2\u00ee\u00ef\t\4\2\2\u00ef"+
		"\u00f0\t\4\2\2\u00f0\u00f1\7/\2\2\u00f1\u00f2\t\4\2\2\u00f2\u00f3\t\4"+
		"\2\2\u00f3\u00f4\7/\2\2\u00f4\u00f5\t\4\2\2\u00f5\u012d\t\4\2\2\u00f6"+
		"\u00f7\t\4\2\2\u00f7\u00f8\t\4\2\2\u00f8\u00f9\t\4\2\2\u00f9\u00fa\t\4"+
		"\2\2\u00fa\u00fb\t\4\2\2\u00fb\u00fc\t\4\2\2\u00fc\u00fd\t\4\2\2\u00fd"+
		"\u00fe\t\4\2\2\u00fe\u00ff\7\"\2\2\u00ff\u0100\t\4\2\2\u0100\u0101\t\4"+
		"\2\2\u0101\u0102\7<\2\2\u0102\u0103\t\4\2\2\u0103\u0104\t\4\2\2\u0104"+
		"\u0105\7<\2\2\u0105\u0106\t\4\2\2\u0106\u012d\t\4\2\2\u0107\u0108\t\4"+
		"\2\2\u0108\u0109\t\4\2\2\u0109\u010a\t\4\2\2\u010a\u010b\t\4\2\2\u010b"+
		"\u010c\t\4\2\2\u010c\u010d\t\4\2\2\u010d\u010e\t\4\2\2\u010e\u012d\t\4"+
		"\2\2\u010f\u0110\t\4\2\2\u0110\u0111\t\4\2\2\u0111\u0112\t\4\2\2\u0112"+
		"\u0113\t\4\2\2\u0113\u0114\7\60\2\2\u0114\u0115\t\4\2\2\u0115\u0116\t"+
		"\4\2\2\u0116\u0117\7\60\2\2\u0117\u0118\t\4\2\2\u0118\u0119\t\4\2\2\u0119"+
		"\u011a\7\"\2\2\u011a\u011b\t\4\2\2\u011b\u011c\t\4\2\2\u011c\u011d\7<"+
		"\2\2\u011d\u011e\t\4\2\2\u011e\u011f\t\4\2\2\u011f\u0120\7<\2\2\u0120"+
		"\u0121\t\4\2\2\u0121\u012d\t\4\2\2\u0122\u0123\t\4\2\2\u0123\u0124\t\4"+
		"\2\2\u0124\u0125\t\4\2\2\u0125\u0126\t\4\2\2\u0126\u0127\7\60\2\2\u0127"+
		"\u0128\t\4\2\2\u0128\u0129\t\4\2\2\u0129\u012a\7\60\2\2\u012a\u012b\t"+
		"\4\2\2\u012b\u012d\t\4\2\2\u012c\u00bc\3\2\2\2\u012c\u00cf\3\2\2\2\u012c"+
		"\u00d9\3\2\2\2\u012c\u00ec\3\2\2\2\u012c\u00f6\3\2\2\2\u012c\u0107\3\2"+
		"\2\2\u012c\u010f\3\2\2\2\u012c\u0122\3\2\2\2\u012d$\3\2\2\2\u012e\u0130"+
		"\t\4\2\2\u012f\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u012f\3\2\2\2\u0131"+
		"\u0132\3\2\2\2\u0132&\3\2\2\2\u0133\u013c\5+\26\2\u0134\u0137\5-\27\2"+
		"\u0135\u0138\5+\26\2\u0136\u0138\5-\27\2\u0137\u0135\3\2\2\2\u0137\u0136"+
		"\3\2\2\2\u0138\u013b\3\2\2\2\u0139\u013b\13\2\2\2\u013a\u0134\3\2\2\2"+
		"\u013a\u0139\3\2\2\2\u013b\u013e\3\2\2\2\u013c\u013d\3\2\2\2\u013c\u013a"+
		"\3\2\2\2\u013d\u013f\3\2\2\2\u013e\u013c\3\2\2\2\u013f\u0140\5+\26\2\u0140"+
		"(\3\2\2\2\u0141\u0143\t\5\2\2\u0142\u0141\3\2\2\2\u0143\u0144\3\2\2\2"+
		"\u0144\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0147"+
		"\b\25\2\2\u0147*\3\2\2\2\u0148\u0149\7)\2\2\u0149,\3\2\2\2\u014a\u014b"+
		"\7^\2\2\u014b.\3\2\2\2\u014c\u014d\t\6\2\2\u014d\60\3\2\2\2\u014e\u014f"+
		"\t\7\2\2\u014f\62\3\2\2\2\u0150\u0151\t\b\2\2\u0151\64\3\2\2\2\u0152\u0153"+
		"\t\t\2\2\u0153\66\3\2\2\2\u0154\u0155\t\n\2\2\u01558\3\2\2\2\u0156\u0157"+
		"\t\13\2\2\u0157:\3\2\2\2\u0158\u0159\t\f\2\2\u0159<\3\2\2\2\u015a\u015b"+
		"\t\r\2\2\u015b>\3\2\2\2\u015c\u015d\t\16\2\2\u015d@\3\2\2\2\u015e\u015f"+
		"\t\17\2\2\u015fB\3\2\2\2\u0160\u0161\t\20\2\2\u0161D\3\2\2\2\u0162\u0163"+
		"\t\21\2\2\u0163F\3\2\2\2\u0164\u0165\t\22\2\2\u0165H\3\2\2\2\u0166\u0167"+
		"\t\23\2\2\u0167J\3\2\2\2\u0168\u0169\t\24\2\2\u0169L\3\2\2\2\u016a\u016b"+
		"\t\25\2\2\u016bN\3\2\2\2\u016c\u016d\t\26\2\2\u016dP\3\2\2\2\u016e\u016f"+
		"\t\27\2\2\u016fR\3\2\2\2\u0170\u0171\t\30\2\2\u0171T\3\2\2\2\u0172\u0173"+
		"\t\31\2\2\u0173V\3\2\2\2\u0174\u0175\t\32\2\2\u0175X\3\2\2\2\u0176\u0177"+
		"\t\33\2\2\u0177Z\3\2\2\2\u0178\u0179\t\34\2\2\u0179\\\3\2\2\2\u017a\u017b"+
		"\t\35\2\2\u017b^\3\2\2\2\u017c\u017d\t\36\2\2\u017d`\3\2\2\2\u017e\u017f"+
		"\t\37\2\2\u017fb\3\2\2\2\r\2\u0098\u00a0\u00a7\u00b9\u012c\u0131\u0137"+
		"\u013a\u013c\u0144";
	public static final ATN _ATN =
		ATNSimulator.deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}