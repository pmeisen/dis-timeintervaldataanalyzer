package net.meisen.dissertation.model.dimensions;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.meisen.dissertation.exceptions.DescriptorDimensionException;
import net.meisen.general.genmisc.exceptions.ForwardedRuntimeException;

public class DescriptorMemberManager {
	private final DescriptorHierarchy descriptorHierarchy;
	private final Map<String, DescriptorMember> members;

	public DescriptorMemberManager(final DescriptorHierarchy descriptorHierarchy) {
		this.descriptorHierarchy = descriptorHierarchy;
		this.members = new HashMap<String, DescriptorMember>();
	}

	public DescriptorMember addMember(final String id, final String name,
			final String pattern, final DescriptorLevel level,
			final Collection<String> rollUpTo) {
		DescriptorMember member = this.members.get(id);
		if (member == null) {
			member = new DescriptorMember(descriptorHierarchy, id, name,
					pattern, level, resolve(rollUpTo));
			this.members.put(id, member);
		} else {
			if (member.isAutoGenerated()) {
				member.setName(name);
				member.setPattern(pattern);
				member.setLevel(level);
				member.setRollUpTo(resolve(rollUpTo));
				member.setAutoGenerated(false);
			} else {
				throw new ForwardedRuntimeException(
						DescriptorDimensionException.class, 1004, id,
						this.members.get(id));
			}
		}

		return member;
	}

	protected List<DescriptorMember> resolve(final Collection<String> rollUpTo) {
		final List<DescriptorMember> rollUpToMembers = new ArrayList<DescriptorMember>();

		if (rollUpTo == null) {

			// when we found a null, we add the root
			final DescriptorMember member = getMember(DescriptorDimension.ROOT_MEMBER_ID);

			/*
			 * in the case the root is not available, it is probably the root
			 * itself being added
			 */
			if (member != null) {
				rollUpToMembers.add(member);
			}
		} else {

			// generate the roll-up members
			for (final String memberId : rollUpTo) {
				DescriptorMember member = getMember(memberId);
				if (member == null) {
					member = descriptorHierarchy.addMember(memberId,
							DescriptorDimension.UNASSIGNED_LEVEL_ID, null);
					member.setAutoGenerated(true);
					this.members.put(memberId, member);
				}

				rollUpToMembers.add(member);
			}
		}

		return rollUpToMembers;
	}

	public DescriptorMember getMember(final String id) {
		return members.get(id);
	}

	public Collection<DescriptorMember> getMembers(final String levelId) {
		final List<DescriptorMember> members = new ArrayList<DescriptorMember>();

		for (final DescriptorMember member : this.members.values()) {
			if (member.getLevel().getId().equals(levelId)) {
				members.add(member);
			}
		}

		return members;
	}

	public Collection<DescriptorMember> getMembers() {
		return Collections.unmodifiableCollection(members.values());
	}
}
