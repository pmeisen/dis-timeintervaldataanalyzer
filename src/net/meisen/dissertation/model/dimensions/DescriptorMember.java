package net.meisen.dissertation.model.dimensions;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import net.meisen.general.genmisc.types.Objects;

/**
 * A definition of a member of a hierarchy for descriptors.
 * 
 * @author pmeisen
 * 
 */
public class DescriptorMember {

	private final String id;
	private final DescriptorHierarchy descriptorHierarchy;

	private final Set<DescriptorMember> rollUpTo;

	private DescriptorLevel level;
	private String name;
	private String pattern;
	private boolean includeNull;

	private boolean autoGenerated;

	/**
	 * Default constructor defining the needed information of a
	 * {@code DescriptorMember}.
	 * 
	 * @param descriptorHierarchy
	 *            the hierarchy the member belongs to
	 * @param id
	 *            the identifier of the member
	 * @param name
	 *            the name of the member
	 * @param pattern
	 *            the pattern defined, can be {@code null}
	 * @param includeNull
	 *            {@code true} if {@code null} values are included, otherwise
	 *            {@code false}
	 * @param level
	 *            the level {@code this} belongs to
	 * @param rollUpTo
	 *            the list of {@code DescriptorMember} instances to roll up to
	 */
	public DescriptorMember(final DescriptorHierarchy descriptorHierarchy,
			final String id, final String name, final String pattern,
			final boolean includeNull, final DescriptorLevel level,
			final Collection<DescriptorMember> rollUpTo) {
		this.descriptorHierarchy = descriptorHierarchy;
		this.id = id;
		this.name = name;
		this.pattern = pattern;
		this.includeNull = includeNull;
		this.level = level;

		this.rollUpTo = new HashSet<DescriptorMember>();
		if (rollUpTo != null) {
			this.rollUpTo.addAll(rollUpTo);
		}

		this.autoGenerated = false;
	}

	/**
	 * Gets the hierarchy {@code this} belongs to.
	 * 
	 * @return the hierarchy {@code this} belongs to
	 */
	public DescriptorHierarchy getHierachy() {
		return descriptorHierarchy;
	}

	/**
	 * Gets the pattern defined for {@code this}. The pattern is used to
	 * determine if a descriptor is covered by {@code this} or not.
	 * 
	 * @return the defined pattern
	 */
	public String getPattern() {
		return pattern;
	}

	/**
	 * Defines the pattern of {@code this}. The pattern is used to determine if
	 * a descriptor is covered by {@code this} or not.
	 * 
	 * @param pattern
	 *            the pattern to be used
	 */
	public void setPattern(final String pattern) {
		this.pattern = pattern;
	}

	/**
	 * Gets the level of {@code this}.
	 * 
	 * @return the level of {@code this}
	 */
	public DescriptorLevel getLevel() {
		return level;
	}

	/**
	 * Specifies the level of {@code this}.
	 * 
	 * @param level
	 *            the level of {@code this}
	 */
	public void setLevel(final DescriptorLevel level) {
		this.level = level;
	}

	/**
	 * Gets the name of {@code this}.
	 * 
	 * @return the name defined for {@code this}
	 */
	public String getName() {
		return name;
	}

	/**
	 * Sets the name of {@code this}.
	 * 
	 * @param name
	 *            the name to be used for {@code this}
	 */
	public void setName(final String name) {
		this.name = name;
	}

	/**
	 * Gets the identifier of {@code this}.
	 * 
	 * @return the identifier of {@code this}
	 */
	public String getId() {
		return id;
	}

	/**
	 * Defines if the member was automatically created, e.g. due to a definition
	 * failure or as root.
	 * 
	 * @return {@code true} if it was auto-generated, otherwise {@code false}
	 */
	public boolean isAutoGenerated() {
		return autoGenerated;
	}

	/**
	 * Defines if the member is auto-generated or not.
	 * 
	 * @param autoGenerated
	 *            {@code true} to mark the member to be auto-generated,
	 *            otherwise {@code false}
	 */
	public void setAutoGenerated(final boolean autoGenerated) {
		this.autoGenerated = autoGenerated;
	}

	/**
	 * Defines the members {@code this} rolls up to.
	 * 
	 * @param rollUpTo
	 *            the members {@code this} rolls up to
	 */
	public void setRollUpTo(final Collection<DescriptorMember> rollUpTo) {
		this.rollUpTo.clear();
		this.rollUpTo.addAll(rollUpTo);

	}

	/**
	 * Determines if {@code null} is included or not.
	 * 
	 * @return {@code true} if {@code null} is covered, otherwise {@code false}
	 */
	public boolean isIncludeNull() {
		return includeNull;
	}

	/**
	 * It's not possible to define if a {@code null} is covered by {@code this}
	 * or not, using a pattern (see {@link #setPattern(String)}. Therefore, this
	 * method can be used to determine if {@code null} is covered by
	 * {@code this} or not.
	 * 
	 * @param includeNull
	 *            {@code true} if {@code null}-values are covered, otherwise
	 *            {@code false}
	 */
	public void setIncludeNull(boolean includeNull) {
		this.includeNull = includeNull;
	}

	@Override
	public String toString() {
		return id + " (" + descriptorHierarchy.getId() + ")";
	}

	@Override
	public int hashCode() {
		return id.hashCode();
	}

	@Override
	public boolean equals(final Object obj) {
		if (obj == this) {
			return true;
		} else if (obj == null) {
			return false;
		} else if (obj instanceof DescriptorMember) {
			final DescriptorMember cmpMember = (DescriptorMember) obj;
			return Objects.equals(id, cmpMember.getId())
					&& Objects.equals(getHierachy(), cmpMember.getHierachy());
		} else {
			return false;
		}
	}

	/**
	 * Gets the members {@code this} rolls up to.
	 * 
	 * @return the members {@code this} rolls up to
	 */
	public Collection<DescriptorMember> getRollUpTo() {
		return Collections.unmodifiableCollection(rollUpTo);
	}

	/**
	 * Checks if the member binds descriptors using a pattern. If the method
	 * returns {@code false} the member is not a leaf member.
	 * 
	 * @return {@code true} if the member is pattern-based and thereby a leaf,
	 *         otherwise {@code false}
	 */
	public boolean isPatternBased() {
		return pattern != null;
	}

	/**
	 * Checks if the specified {@code value} is covered by {@code this}. The
	 * method always returns {@code false} if the member is not pattern-based
	 * (see {@link #isPatternBased()}.
	 * 
	 * @param value
	 *            the value to be checked
	 * 
	 * @return {@code true} if the member contains the value, otherwise
	 *         {@code false}
	 */
	public boolean containsValue(final String value) {
		final String pattern = getPattern();

		if (!isPatternBased()) {
			return false;
		} else if (value == null) {
			return isIncludeNull();
		} else {
			return value.matches(pattern);
		}
	}
}
